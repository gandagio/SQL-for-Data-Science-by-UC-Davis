Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (using primary key)
ii. Hours = 2052 (using hours)
iii. Category = 2643 (using business_id)
iv. Attribute = 39 (using name)
v. Review = 10000 (using primary key)
vi. Checkin = 493 (using business_id)
vii. Photo = 10000 (using primary key)
viii. Tip = 537 (using user_id)
ix. User = 10000 (using primary key)
x. Friend = 11 (using user_id)
xi. Elite_years = 2780 (using user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no.
	
	
	SQL code used to arrive at answer:

SELECT *
FROM 
    user
WHERE
    id IS NULL OR
    name IS NULL OR
    review_count IS NULL OR
    yelping_since IS NULL OR
    useful IS NULL OR
    funny IS NULL OR
    cool IS NULL OR
    fans IS NULL OR
    average_stars IS NULL OR
    compliment_hot IS NULL OR
    compliment_more IS NULL OR
    compliment_profile IS NULL OR
    compliment_cute IS NULL OR
    compliment_list IS NULL OR
    compliment_note IS NULL OR
    compliment_plain IS NULL OR
    compliment_cool IS NULL OR
    compliment_funny IS NULL OR
    compliment_writer IS NULL OR
    compliment_photos IS NULL;
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	 max: 5.0  avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	  avg: 24.2995
		

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT 
    city,
    SUM (review_count) as total_reviews
FROM business
GROUP BY city
ORDER BY total_reviews DESC;
	
	Copy and Paste the Result Below:

+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
    stars,
    COUNT (stars) AS count
FROM business
WHERE city = "Avon"
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT 
    stars,
    COUNT (stars) AS count
FROM business
WHERE city = "Beachwood"
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT 
    name,
    SUM (review_count) AS total_reviews
FROM user
GROUP BY id
ORDER BY total_reviews DESC
LIMIT 3;
		
	Copy and Paste the Result Below:
		
+--------+---------------+
| name   | total_reviews |
+--------+---------------+
| Gerald |          2000 |
| Sara   |          1629 |
| Yuri   |          1339 |
+--------+---------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
It was found that when the number of reviews is very low, users will almost have no fans if not have no fans at all.
The number of fans increases as the number of reviews increases.
The general trend of the result is that the more reviews that users post, the more fans they tend to have, even though this is not absolute.
Therefore, yes there exists a correlation between posting more reviews and having more fans, however the strength of this correlation has to be assessed with scatter plot and statistics such as the R^2 value.
Other factors can also affect the number of fans which have to be taken into consideration as well. 
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word love in them.

	
	SQL code used to arrive at answer:

SELECT 
    COUNT 
        (Case WHEN text LIKE "%love%" THEN 1 
        ELSE NULL END) AS love,
    COUNT
        (Case WHEN text LIKE "%hate%" THEN 1
        ELSE NULL END) AS hate
FROM review;

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT 
    name,
    SUM (fans) AS no_of_fans
FROM user
GROUP BY id
ORDER BY no_of_fans DESC
LIMIT 10;
	
	Copy and Paste the Result Below:

+-----------+------------+
| name      | no_of_fans |
+-----------+------------+
| Amy       |        503 |
| Mimi      |        497 |
| Harald    |        311 |
| Gerald    |        253 |
| Christine |        173 |
| Lisa      |        159 |
| Cat       |        133 |
| William   |        126 |
| Fran      |        124 |
| Lissa     |        120 |
+-----------+------------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Yes. The restaurants with 2-3 stars tend to open their business longer on average and they tend to open until very late at night (00:00 AM).
	Meanwhile, restaurants with 4-5 stars tend to close earlier and their restaurants are not open as long as the 2-3 stars on average.
	A difference in distribution of hours on Sunday can be seen in one of the restaurants in the 4-5 stars group but not in the 2-3 stars group.

ii. Do the two groups you chose to analyze have a different number of reviews?
   
	Yes. The number of reviews for the 4-5 stars group is significantly higher on average compared to the 2-3 stars group.      
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	
	No meaningful inference can be made as only 3 businesses came up from the query (it would not be reasonable to say that 2 out of 3 restaurants in Las Vegas have ratings of 4 and above).
	All 3 businesses have different postal codes as well, so no commonnalities found from this field.

SQL code used for analysis:

SELECT
    b.id,
    b.name,
    b.city,
    c.category,
    b.stars,
    h.hours,
    b.review_count,
    b.neighborhood,
    b.postal_code
FROM ((business b 
        INNER JOIN hours h 
            ON b.id = h.business_id)
        INNER JOIN category c
            ON b.id = c.business_id)
WHERE b.city = "Las Vegas" AND c.category = "Restaurants"
ORDER BY b.stars;			
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
   
	There are 7991 businesses that are open and 1512 businesses that are closed       
         
ii. Difference 2:
     
	Businesses that are still open have an average of 3.72 stars while the closed businesses have 3.52 stars in average. 
        
         
SQL code used for analysis:

SELECT 
    COUNT (b2.is_open) AS no_of_businesses,
    AVG (b2.stars) AS average_stars,
    b2.is_open
FROM 
    (SELECT 
        DISTINCT name,
        is_open,
        stars
        FROM business) as b2
GROUP BY is_open;
	
+------------------+---------------+---------+
| no_of_businesses | average_stars | is_open |
+------------------+---------------+---------+
|             1512 | 3.52149470899 |       0 |
|             7991 | 3.72318858716 |       1 |
+------------------+---------------+---------+

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

We chose to analyze the dataset to determine which city/ies are the best for a particular business category in terms of average star ratings.       
Note that our definition for the "best city for a business category" is the city in which a business category will earn AT LEAST 4 stars AND the city has the highest average star rating for that category, rather than the city with the highest number of sales for a particular business category, etc.
       
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
Suppose we are in a hypothetical scenario where we can open up a business in any city that we want, we want to know which city would be the best choice to open our business in.
In order to answer that question, we need data on business categories with their respective cities as well as the star ratings of every business available in every city.
We can then group the businesses according to their categories and then filter and sort this data based on the average stars in a particular city to get the answer that we want.     
Sometimes we also want to get data regarding which business categories thrive the best in that city, which can also be partially deduced from this analysis.
This query result gives the list of cities that have the highest average stars for a distinct business category.
There are other variables that can also be used to answer this question such as the number of reviews, the number of positive comments on reviews or if the business is still open until now or not, which we did not include in this data but would definitely help perfect this query or answer it using a different approach.
                 
iii. Output of your finished dataset:

+---------------------------+-----------------------+---------------+
| category                  | cities                | average_stars |
+---------------------------+-----------------------+---------------+
| Active Life               | Phoenix,Tempe,Toronto |           5.0 |
| Acupuncture               | Toronto               |           4.5 |
| American (New)            | Westlake              |           4.0 |
| American (Traditional)    | Middleton             |           4.0 |
| Arcades                   | Toronto               |           4.5 |
| Architectural Tours       | Scottsdale            |           4.5 |
| Asian Fusion              | Las Vegas             |           4.0 |
| Auto Repair               | Gastonia              |           5.0 |
| Automotive                | Charlotte             |           5.0 |
| Bakeries                  | Chandler              |           5.0 |
| Barbeque                  | Phoenix               |           4.0 |
| Bars                      | Chandler,Medina       |           4.0 |
| Beauty & Spas             | Las Vegas             |           5.0 |
| Candy Stores              | Cleveland             |           4.0 |
| Cannabis Clinics          | Mesa                  |           4.5 |
| Car Wash                  | Phoenix               |           5.0 |
| Carpet Cleaning           | Charlotte             |           5.0 |
| Coffee & Tea              | Cleveland             |           4.0 |
| Convenience Stores        | Phoenix               |           5.0 |
| Dentists                  | Tempe                 |           4.5 |
| Desserts                  | Las Vegas             |           4.0 |
| Doctors                   | Las Vegas,Phoenix     |           5.0 |
| Dog Parks                 | Henderson             |           4.0 |
| Door Sales/Installation   | Chandler              |           5.0 |
| Event Planning & Services | Chandler              |           5.0 |
+---------------------------+-----------------------+---------------+
(Output limit exceeded, 25 of 65 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    bc3.category,
    bc3.cities,
    MAX (bc3.average_stars) AS average_stars
FROM
    (SELECT
        bc2.category,
        GROUP_CONCAT(bc2.city) AS cities,
        bc2.average_stars
    FROM
        (SELECT
            bc.category_city,
            AVG (bc.stars) AS average_stars,
            bc.category,
            bc.city
        FROM
            (SELECT    
                c.category,
                b.name,
                b.city,
                c. category || ", " || b.city AS category_city,
                b.stars 
            FROM business b INNER JOIN category c ON b.id = c.business_id
            WHERE b.stars >= 4.0
            GROUP BY b.name) AS bc
        GROUP BY bc.category_city
        ORDER BY bc.category_city) AS bc2
    GROUP BY bc2.category, bc2.average_stars) AS bc3
GROUP BY bc3.category;
